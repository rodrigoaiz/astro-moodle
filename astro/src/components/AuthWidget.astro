---
// Widget de autenticaci√≥n reutilizable
---

<div class="auth-widget card p-6 min-w-[320px] animate-float">
  <div id="auth-status" class="text-center">
    <div class="loading-spinner">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-yellow-400 mx-auto"></div>
      <p class="mt-3 text-sm text-white/80">Verificando sesi√≥n...</p>
    </div>
  </div>
</div>

<script>
  // Interfaces TypeScript para los datos del usuario
  interface UserData {
    fullname?: string;
    email?: string;
    authenticated?: boolean;
  }

  // Configuraci√≥n de la API
  const API_CONFIG = {
    baseUrl: '/api',
    endpoints: {
      auth: '/auth',
      profile: '/profile'
    }
  };

  // Elementos del DOM
  let authStatusElement: HTMLElement | null;
  let loginFormHtml: string;
  let loggedInHtml: string;

  // Inicializar cuando el DOM est√© listo
  document.addEventListener('DOMContentLoaded', function() {
    authStatusElement = document.getElementById('auth-status');

    // Templates HTML
    loginFormHtml = `
      <div class="auth-form">
        <div class="text-center mb-6">
          <h3 class="text-2xl font-bold text-white mb-2">¬°Hola! üëã</h3>
          <p class="text-white/70">Inicia sesi√≥n para continuar</p>
        </div>
        <form id="loginForm" class="space-y-4">
          <div>
            <input type="text"
                   id="username"
                   placeholder="üë§ Usuario"
                   required
                   class="form-input">
          </div>
          <div>
            <input type="password"
                   id="password"
                   placeholder="üîí Contrase√±a"
                   required
                   class="form-input">
          </div>
          <button type="submit"
                  class="btn btn-primary w-full text-lg py-3">
            ‚ú® Entrar
          </button>
          <div class="text-xs text-white/60 text-center mt-4">
            Usa tus credenciales de Moodle
          </div>
        </form>
      </div>
    `;    // Verificar estado de autenticaci√≥n
    checkAuthStatus();
  });

  // Funci√≥n para verificar el estado de autenticaci√≥n
  async function checkAuthStatus() {
    try {
      // Primero verificamos nuestro sistema de auth
      const authResponse = await fetch(`${API_CONFIG.baseUrl}${API_CONFIG.endpoints.auth}`, {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Accept': 'application/json',
          'Cache-Control': 'no-cache'
        }
      });

      if (authResponse.ok) {
        const authData = await authResponse.json();
        if (authData.authenticated && authData.user) {
          // Usuario autenticado con nuestro sistema - mostrar informaci√≥n
          showUserInfo(authData.user);
          return;
        }
      }

      // Si no est√° autenticado con nuestro sistema, verificar si hay sesi√≥n de Moodle
      const sessionResponse = await fetch('/api/check-session', {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Accept': 'application/json',
          'Cache-Control': 'no-cache'
        }
      });

      if (sessionResponse.ok) {
        const sessionData = await sessionResponse.json();
        if (sessionData.loggedIn && sessionData.user) {
          // Usuario tiene sesi√≥n de Moodle pero no est√° autenticado en nuestro sistema
          // Mostrar informaci√≥n del usuario pero con opci√≥n de login local
          showUserInfo(sessionData.user);
          return;
        }
      }

      // Usuario no autenticado - mostrar formulario de login
      showLoginForm();

    } catch (error) {
      console.error('Error de conexi√≥n:', error);
      showConnectionError();
    }
  }

  // Funci√≥n para mostrar informaci√≥n del usuario
  function showUserInfo(userData: any) {
    const fullName = userData.name || userData.fullname || `${userData.firstname || ''} ${userData.lastname || ''}`.trim() || 'Usuario';
    const email = userData.email || '';
    const firstLetter = fullName.charAt(0).toUpperCase();

    loggedInHtml = `
      <div class="user-info">
        <div class="flex items-center gap-4 mb-6">
          <div class="w-12 h-12 bg-gradient-to-r from-yellow-400 to-orange-400 rounded-full flex items-center justify-center text-purple-900 font-bold text-lg shadow-lg">
            ${firstLetter}
          </div>
          <div class="flex-1 min-w-0">
            <p class="font-bold text-white text-lg truncate">¬°Hola ${fullName}! üéâ</p>
            ${email ? `<p class="text-sm text-white/70 truncate">${email}</p>` : ''}
          </div>
        </div>


          <button onclick="logout()"
            class="btn w-full bg-red-500/80 hover:bg-red-500 border border-red-400/50 text-white transition-all duration-200">
            üëã Cerrar Sesi√≥n
          </button>
        </div>
      </div>
    `;

    if (authStatusElement) {
      authStatusElement.innerHTML = loggedInHtml;
    }
  }

  // Funci√≥n para mostrar el formulario de login
  function showLoginForm() {
    if (authStatusElement) {
      authStatusElement.innerHTML = loginFormHtml;

      // Agregar event listener al formulario
      const loginForm = document.getElementById('loginForm') as HTMLFormElement;
      if (loginForm) {
        loginForm.addEventListener('submit', handleLogin);
      }
    }
  }

  // Funci√≥n para manejar el login
  async function handleLogin(event: Event) {
    event.preventDefault();

    const usernameElement = document.getElementById('username') as HTMLInputElement;
    const passwordElement = document.getElementById('password') as HTMLInputElement;

    if (!usernameElement || !passwordElement) return;

    const username = usernameElement.value.trim();
    const password = passwordElement.value;

    if (!username || !password) {
      showLoginError('Por favor, completa todos los campos');
      return;
    }

    // Mostrar estado de carga
    if (authStatusElement) {
      authStatusElement.innerHTML = `
        <div class="loading-state text-center">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-yellow-400 mx-auto"></div>
          <p class="mt-3 text-white/80">Iniciando sesi√≥n...</p>
        </div>
      `;
    }

    try {
      const response = await fetch(`${API_CONFIG.baseUrl}${API_CONFIG.endpoints.auth}`, {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ username, password })
      });

      const data = await response.json();

      if (response.ok && data.success) {
        // Login exitoso - mostrar informaci√≥n del usuario
        showUserInfo(data.user);

        // üöÄ NOTIFICAR A OTRAS PESTA√ëAS/WIDGETS DEL CAMBIO DE AUTH
        notifyAuthChange();
      } else {
        showLoginError(data.message || 'Credenciales incorrectas');
      }
    } catch (error) {
      console.error('Error durante el login:', error);
      showLoginError('Error de conexi√≥n. Int√©ntalo de nuevo.');
    }
  }

  // Funci√≥n para notificar cambios de autenticaci√≥n a otras pesta√±as/widgets
  function notifyAuthChange() {
    try {
      // Notificar via localStorage (funciona entre pesta√±as)
      localStorage.setItem('moodle_auth_changed', 'true');
      setTimeout(() => localStorage.removeItem('moodle_auth_changed'), 100);

      // Notificar via postMessage a todas las ventanas
      window.postMessage({
        type: 'MOODLE_AUTH_CHANGED',
        timestamp: Date.now()
      }, window.location.origin);

      console.log('Auth change notification sent');
    } catch (error) {
      console.error('Error notifying auth change:', error);
    }
  }

  // Funci√≥n para mostrar errores de login
  function showLoginError(message: string) {
    showLoginForm();

    // Agregar mensaje de error
    if (authStatusElement) {
      const authForm = authStatusElement.querySelector('.auth-form');
      if (authForm) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'mt-4 p-3 bg-red-500/20 border border-red-400/50 rounded-lg text-red-200 text-sm text-center backdrop-blur-sm';
        errorDiv.innerHTML = `‚ö†Ô∏è ${message}`;
        authForm.appendChild(errorDiv);

        // Remover el error despu√©s de 5 segundos
        setTimeout(() => {
          if (errorDiv.parentNode) {
            errorDiv.remove();
          }
        }, 5000);
      }
    }
  }

  // Funci√≥n para mostrar error de conexi√≥n
  function showConnectionError() {
    if (authStatusElement) {
      authStatusElement.innerHTML = `
        <div class="error-message text-center">
          <div class="text-red-400 text-4xl mb-4">‚ö†Ô∏è</div>
          <p class="text-white/80 mb-4">Error de conexi√≥n</p>
          <button onclick="checkAuthStatus()"
            class="btn btn-accent">
            üîÑ Reintentar
          </button>
        </div>
      `;
    }
  }

  // Funci√≥n para cerrar sesi√≥n
  async function logout() {
    try {
      // Mostrar mensaje de cierre de sesi√≥n
      if (authStatusElement) {
        authStatusElement.innerHTML = `
          <div class="loading-state text-center">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-yellow-400 mx-auto"></div>
            <p class="mt-3 text-white/80">Cerrando sesi√≥n...</p>
          </div>
        `;
      }

      // Llamar al endpoint de logout del servidor de auth
      const response = await fetch(`${API_CONFIG.baseUrl}/auth`, {
        method: 'DELETE',
        credentials: 'include',
        headers: {
          'Accept': 'application/json'
        }
      });

      if (response.ok) {
        // Logout exitoso - mostrar formulario de login
        showLoginForm();

        // üöÄ NOTIFICAR A OTRAS PESTA√ëAS/WIDGETS DEL CAMBIO DE AUTH
        notifyAuthChange();
      } else {
        console.warn('Error en logout:', response.status);
        // A√∫n as√≠ mostrar el formulario de login
        showLoginForm();
        // Y notificar el cambio
        notifyAuthChange();
      }

    } catch (error) {
      console.error('Error durante logout:', error);
      // En caso de error, a√∫n as√≠ mostrar formulario de login
      showLoginForm();
      // Y notificar el cambio
      notifyAuthChange();
    }
  }

  // Funci√≥n global para logout (accesible desde HTML)
  (window as any).logout = logout;
</script>
